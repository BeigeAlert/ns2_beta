<shader>
    
    <inputs>
        <input name="albedoMap"     type="texture" address="wrap" />
        <input name="normalMap"     type="texture" address="wrap" />
        <input name="specularMap"   type="texture" address="wrap" />
        <input name="opacityMap"    type="texture" address="wrap" />
        
        <input name="decals"        type="float">  0.0 </input>
        <input name="noVisDist"     type="float">  5.0 </input>
        <input name="fullVisDist"   type="float">  2.5 </input>
    </inputs>
    
    <params>
        <param name="alphaTest">true</param>
        <param name="vsPosition">true</param>
        <param name="vsNormal">true</param>
        <param name="vsTangent">true</param>
        <param name="vsBinormal">true</param>
    </params>
    
    <code>
    <![CDATA[
        float3 DecodeNormal(const float4 texNormal)
        {
            float4 n = texNormal * 2 - 1;
            return n.xyz;
        }
        void MaterialShader(in Material_Input input, inout Material material)
        {
            float4 specularGloss = tex2D(specularMap, input.texCoord);
            
            float distance = length(input.vsPosition);
            float visibility = saturate((distance - noVisDist) / (fullVisDist - noVisDist));
            
            // Can't do transparency, so try to erode the edges by cutting out fragments facing
            // away from the viewer (eg on the edges) with increasing strictness as the visibility
            // decreases.
            float3 tsNormal = DecodeNormal(tex2D(normalMap, input.texCoord));
            float3 vsNormal = tsNormal.x * input.vsTangent +
                              tsNormal.y * input.vsBinormal +
                              tsNormal.z * input.vsNormal;
            
            float3 ssDir = normalize(input.vsPosition);
            float agreement = saturate(-dot(ssDir, input.vsNormal));
            agreement *= agreement;
            agreement *= agreement;
            
            material.opacity = (agreement + ((2 * visibility) - 1)) * tex2D(opacityMap, input.texCoord).r;
            
            material.albedo     = tex2D(albedoMap, input.texCoord).rgb;
            material.tsNormal   = tsNormal;
            material.specular   = specularGloss.rgb;
            material.gloss      = specularGloss.a;
            material.id         = decals;
        }
    ]]>
    </code>

</shader>